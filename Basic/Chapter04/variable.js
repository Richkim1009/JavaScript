// 변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.
// 변수는 값의 위치를 가리키는 상징적인 이름이다.

// result 는 변수 이름, 변수에 값을 저장하는 것을 할당, 변수에 저장된 값을 읽어 들이는 것을 참조
var result = 10 + 20;

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나ㅇ로 그룹화 해서 하나의 값처럼 사용할 수 있다.
var user = { id: 1, name: 'Lee' };
var users = [ { id: 1, name: 'Lee' }, { id: 2, name: 'Kim' } ];

// 식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.

// 식별자는 값이 아니라 메모리 주소를 기억하고 있다.

// 변수를 선언할 때는 var, let, const 키워드를 사용한다.

// score 라는 변수안에는 자동적으로 undefine이 할당 되어있다.
var score;
// 선언하지 않은 식별자에 접근하면 RefferenceError(참조 에러)가 발생한다.

// 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라그 이전 단계에서 먼저 실행되기 때문이다.
// 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅 이라 한다.
console.log(score);

var score;

var score;
score = 80;

var score = 80; 

// 위와 아래의 식은 같은 표현이다.

// 변수 선언은 런타임 이전에 실행되지만 값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 발생한다.

console.log(score); // undefine
var score; // 1.변수 선언
score = 80; // 2. 값의 할당

console.log(score); // 80

// 값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수라 한다. const 키워드!!






