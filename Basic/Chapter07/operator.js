// 연산자는 산술, 할당, 비교, 논리, 타입, 지수 연산이 있다.
5 * 4; // 산술 연산

'My name is ' + 'Lee' // 문자 연결 연산자

color = 'red' // 할당 연산자

3 > 5 // 비교 연산자

true && false // 논리 연산자

typeof 'Hi' // 타입 연산자

// 산술 연산자는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다. 불가능한 경우, NaN을 반환한다.
// 이항산술 연산자와 단항산술 연산자가 있다.

// + - * / % 이항산술 연산자

// ++ -- + - 단항 산술 연산자

// ++/-- 연산자는 피연사자의 값을 변경하는 부수 효과가 있다.
var x = 1;
x++;
console.log(x);
x--;
console.log(x);

// ++/--  앞에 오냐 뒤에 오냐에 따라 달라진다.

var x = 5, result;

result = x++; // result = 5, x = 6

result = ++x; // result = 7, x = 7

result = x--; // result = 7, x = 6

result = --x; // result = 5, x = 5

var x = '1';
console.log(+x); // 문자열을 숫자로 타입 변환한다.

x = true;
console.log(+x); // 불리언 값을 숫자로 타입 변환한다. -x를 하면 -1을 반환한다.

x = false;
console.log(+x); // 0
// -를 붙여도 같은 효과가 난다.

// 1 + true를 연산하면 자바스크립트 엔진은 암묵적으로 불리언 타입의 값이 true를 숫자 타입인 1로 타입을 강제로 벼환한후 연산을 수행한다. 이를 암묵적 타입 변환 or 타입 강제 변환이라고 한다.

// =, +=, -=, *=, /=, %= 할당연산자, 모두 왼쪽의 값이 변하는 부수효과가 있다.

var x;
console.log(x = 10); // 할당문은 표현식인 문이다. 10

// 비교연산자는 좌항과 우항의 피연산자를 비교한 다음 그 결과를 불리언 값으로 반환한다.
// ==, ===, !=, !==
// == and != 좌항과 우항의 피연산자를 비교할때 먼저 암묵적 타입변환을 통해 타입을 일치시킨 후 같은 값인지 비교한다.
// === and !=== 타입과 값을 모두 비교한다.
NaN === NaN // false, isNaN을 사용하여야 한다.

-0 === +0 // true
Object.is(-0, +0) // false

NaN === NaN // false
Object.is(NaN, NaN) // true

// >, <, >=, <= 

// 삼항 조건 연산자
var result = score >= 60 ? 'pass' : 'fail'; // score가 60보다 크거나 같으면 result의 값은 'pass' 아니라면 'fail'

// ||, &&, ! 논리 연산자
// or, and, not

// 단축 평가
'Cat' && 'Dog' // 'Dog'

// 값이 null 타입인지 확인할 때는 typeof 연산자를 사용하지 말고 일치 연산자를 사용하자.

?. //옵셔널 체이닝 연산자
?? // null 병합 연산자
delete // 프로퍼티 삭제
new // 생선자 함수를 호출할 때 사용하여 인스턴스를 생성
instanceof // 좌변의 객체가 우변의 생성자 함수와 연결된 인스턴스인지 판별
in // 프로퍼티 존재 확인


