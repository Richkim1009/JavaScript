// 값은 식이 평가되어 생성된 결과를 말한다.

// 리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법을 말한다.

3 // 숫자 리터럴

// 표현식은 값으로 평가될 수 있는 문이다. 즉, 표현식이 평가되면 새로운 값을 생성하거나 기존값을 참조한다.
// 리터럴 = 표현식
var score = 100; // 100은 리터럴 score도 참조를 한바면 100으로 평가되기 때문에 표현식

// 값으로 평가될 수 있는 문은 모두 표현식

// 리터럴 표현식
10
'hello'

// 식별자 표현식(선언이 먼저 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10 + 10
sum = 10
sum !== 10

// 함수 / 메서드 호출 표현식(선언이 이미 존재한다고 가정)
square()
person.getName()

// 문(명령문)은 프로그램을 구성하는 기본 단위이자 최소 실행 단위다.

// 토큰이란 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.

// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.
var x;

// 1, 2, 1 + 2, x = 1 + 2는 모두 표현식이다.
// x = 1 + 2 는 표현식이면서 완전한 문이기도 하다.
x = 1 + 2;

// 표현식이 아닌 문은 값처럼 사용할 수 없다.

// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당무은 표현식인 문이다.
x = 100;

// 표현식인 문은 값처럼 사용할 수 있다.
var foo = x = 100;


